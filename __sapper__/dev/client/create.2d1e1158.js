import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_each_argument, o as onMount, e as element, t as text, j as space, c as claim_element, a as children, l as claim_text, b as detach_dev, k as claim_space, f as attr_dev, g as add_location, h as insert_dev, m as append_dev, q as listen_dev, u as set_data_dev, E as query_selector_all, p as set_input_value, w as prevent_default, n as noop, x as destroy_each, r as run_all, y as create_component, z as claim_component, A as mount_component, B as transition_in, C as transition_out, D as destroy_component } from './client.0dea0b41.js';

/* src/components/Games.svelte generated by Svelte v3.19.1 */
const file = "src/components/Games.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[16] = list[i];
	child_ctx[18] = i;
	return child_ctx;
}

// (63:12) {#each regelArray as regarr, index}
function create_each_block(ctx) {
	let div1;
	let div0;
	let t0_value = /*regarr*/ ctx[16] + "";
	let t0;
	let t1;
	let button;
	let t2;
	let t3;
	let dispose;

	function click_handler(...args) {
		return /*click_handler*/ ctx[12](/*index*/ ctx[18], ...args);
	}

	const block = {
		c: function create() {
			div1 = element("div");
			div0 = element("div");
			t0 = text(t0_value);
			t1 = space();
			button = element("button");
			t2 = text("X");
			t3 = space();
			this.h();
		},
		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			t0 = claim_text(div0_nodes, t0_value);
			div0_nodes.forEach(detach_dev);
			t1 = claim_space(div1_nodes);
			button = claim_element(div1_nodes, "BUTTON", { class: true });
			var button_nodes = children(button);
			t2 = claim_text(button_nodes, "X");
			button_nodes.forEach(detach_dev);
			t3 = claim_space(div1_nodes);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "class", "long svelte-6zaa59");
			add_location(div0, file, 64, 20, 1376);
			attr_dev(button, "class", "svelte-6zaa59");
			add_location(button, file, 65, 20, 1429);
			attr_dev(div1, "class", "regler svelte-6zaa59");
			add_location(div1, file, 63, 16, 1335);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);
			append_dev(div0, t0);
			append_dev(div1, t1);
			append_dev(div1, button);
			append_dev(button, t2);
			append_dev(div1, t3);
			dispose = listen_dev(button, "click", click_handler, false, false, false);
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*regelArray*/ 8 && t0_value !== (t0_value = /*regarr*/ ctx[16] + "")) set_data_dev(t0, t0_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(63:12) {#each regelArray as regarr, index}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let h1;
	let t1;
	let t2;
	let div5;
	let div0;
	let input0;
	let t3;
	let input1;
	let t4;
	let div4;
	let div1;
	let t5;
	let div3;
	let div2;
	let form;
	let input2;
	let t6;
	let button0;
	let t7;
	let t8;
	let label0;
	let input3;
	let t9;
	let t10;
	let label1;
	let input4;
	let t11;
	let t12;
	let button1;
	let t13;
	let dispose;
	let each_value = /*regelArray*/ ctx[3];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			t0 = space();
			h1 = element("h1");
			t1 = text("Create your awesome game!");
			t2 = space();
			div5 = element("div");
			div0 = element("div");
			input0 = element("input");
			t3 = space();
			input1 = element("input");
			t4 = space();
			div4 = element("div");
			div1 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t5 = space();
			div3 = element("div");
			div2 = element("div");
			form = element("form");
			input2 = element("input");
			t6 = space();
			button0 = element("button");
			t7 = text("ADD");
			t8 = space();
			label0 = element("label");
			input3 = element("input");
			t9 = text("\n                Random order");
			t10 = space();
			label1 = element("label");
			input4 = element("input");
			t11 = text("\n                Use names");
			t12 = space();
			button1 = element("button");
			t13 = text("PUBLISH");
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-vih9u5\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			h1 = claim_element(nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t1 = claim_text(h1_nodes, "Create your awesome game!");
			h1_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			div5 = claim_element(nodes, "DIV", { id: true, class: true });
			var div5_nodes = children(div5);
			div0 = claim_element(div5_nodes, "DIV", { id: true, class: true });
			var div0_nodes = children(div0);

			input0 = claim_element(div0_nodes, "INPUT", {
				type: true,
				placeholder: true,
				class: true
			});

			t3 = claim_space(div0_nodes);

			input1 = claim_element(div0_nodes, "INPUT", {
				type: true,
				placeholder: true,
				class: true
			});

			div0_nodes.forEach(detach_dev);
			t4 = claim_space(div5_nodes);
			div4 = claim_element(div5_nodes, "DIV", { id: true, class: true });
			var div4_nodes = children(div4);
			div1 = claim_element(div4_nodes, "DIV", { id: true, class: true });
			var div1_nodes = children(div1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div1_nodes);
			}

			div1_nodes.forEach(detach_dev);
			t5 = claim_space(div4_nodes);
			div3 = claim_element(div4_nodes, "DIV", { id: true, class: true });
			var div3_nodes = children(div3);
			div2 = claim_element(div3_nodes, "DIV", { id: true, class: true });
			var div2_nodes = children(div2);
			form = claim_element(div2_nodes, "FORM", { class: true });
			var form_nodes = children(form);
			input2 = claim_element(form_nodes, "INPUT", { placeholder: true, class: true });
			t6 = claim_space(form_nodes);
			button0 = claim_element(form_nodes, "BUTTON", { class: true });
			var button0_nodes = children(button0);
			t7 = claim_text(button0_nodes, "ADD");
			button0_nodes.forEach(detach_dev);
			form_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			t8 = claim_space(div3_nodes);
			label0 = claim_element(div3_nodes, "LABEL", { class: true });
			var label0_nodes = children(label0);
			input3 = claim_element(label0_nodes, "INPUT", { type: true, class: true });
			t9 = claim_text(label0_nodes, "\n                Random order");
			label0_nodes.forEach(detach_dev);
			t10 = claim_space(div3_nodes);
			label1 = claim_element(div3_nodes, "LABEL", { class: true });
			var label1_nodes = children(label1);
			input4 = claim_element(label1_nodes, "INPUT", { type: true, class: true });
			t11 = claim_text(label1_nodes, "\n                Use names");
			label1_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			div4_nodes.forEach(detach_dev);
			t12 = claim_space(div5_nodes);
			button1 = claim_element(div5_nodes, "BUTTON", { class: true });
			var button1_nodes = children(button1);
			t13 = claim_text(button1_nodes, "PUBLISH");
			button1_nodes.forEach(detach_dev);
			div5_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Your games";
			attr_dev(h1, "class", "svelte-6zaa59");
			add_location(h1, file, 52, 0, 945);
			attr_dev(input0, "type", "text");
			attr_dev(input0, "placeholder", "Name of the game");
			attr_dev(input0, "class", "svelte-6zaa59");
			add_location(input0, file, 56, 8, 1028);
			attr_dev(input1, "type", "text");
			attr_dev(input1, "placeholder", "Description");
			attr_dev(input1, "class", "svelte-6zaa59");
			add_location(input1, file, 57, 8, 1105);
			attr_dev(div0, "id", "top");
			attr_dev(div0, "class", "svelte-6zaa59");
			add_location(div0, file, 55, 4, 1005);
			attr_dev(div1, "id", "print");
			attr_dev(div1, "class", "svelte-6zaa59");
			add_location(div1, file, 60, 8, 1218);
			attr_dev(input2, "placeholder", "Add rule");
			attr_dev(input2, "class", "svelte-6zaa59");
			add_location(input2, file, 73, 20, 1735);
			attr_dev(button0, "class", "svelte-6zaa59");
			add_location(button0, file, 74, 20, 1805);
			attr_dev(form, "class", "svelte-6zaa59");
			add_location(form, file, 72, 16, 1673);
			attr_dev(div2, "id", "add");
			attr_dev(div2, "class", "svelte-6zaa59");
			add_location(div2, file, 71, 12, 1642);
			attr_dev(input3, "type", "checkbox");
			attr_dev(input3, "class", "svelte-6zaa59");
			add_location(input3, file, 78, 16, 1905);
			attr_dev(label0, "class", "svelte-6zaa59");
			add_location(label0, file, 77, 12, 1881);
			attr_dev(input4, "type", "checkbox");
			attr_dev(input4, "class", "svelte-6zaa59");
			add_location(input4, file, 82, 16, 2037);
			attr_dev(label1, "class", "svelte-6zaa59");
			add_location(label1, file, 81, 12, 2013);
			attr_dev(div3, "id", "bottom");
			attr_dev(div3, "class", "svelte-6zaa59");
			add_location(div3, file, 70, 8, 1612);
			attr_dev(div4, "id", "display");
			attr_dev(div4, "class", "svelte-6zaa59");
			add_location(div4, file, 59, 4, 1191);
			attr_dev(button1, "class", "svelte-6zaa59");
			add_location(button1, file, 87, 4, 2161);
			attr_dev(div5, "id", "creator");
			attr_dev(div5, "class", "svelte-6zaa59");
			add_location(div5, file, 54, 0, 982);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, h1, anchor);
			append_dev(h1, t1);
			insert_dev(target, t2, anchor);
			insert_dev(target, div5, anchor);
			append_dev(div5, div0);
			append_dev(div0, input0);
			set_input_value(input0, /*name*/ ctx[0]);
			append_dev(div0, t3);
			append_dev(div0, input1);
			set_input_value(input1, /*description*/ ctx[1]);
			append_dev(div5, t4);
			append_dev(div5, div4);
			append_dev(div4, div1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div1, null);
			}

			append_dev(div4, t5);
			append_dev(div4, div3);
			append_dev(div3, div2);
			append_dev(div2, form);
			append_dev(form, input2);
			set_input_value(input2, /*regel*/ ctx[2]);
			append_dev(form, t6);
			append_dev(form, button0);
			append_dev(button0, t7);
			append_dev(div3, t8);
			append_dev(div3, label0);
			append_dev(label0, input3);
			input3.checked = /*random*/ ctx[4];
			append_dev(label0, t9);
			append_dev(div3, t10);
			append_dev(div3, label1);
			append_dev(label1, input4);
			input4.checked = /*useName*/ ctx[5];
			append_dev(label1, t11);
			append_dev(div5, t12);
			append_dev(div5, button1);
			append_dev(button1, t13);

			dispose = [
				listen_dev(input0, "input", /*input0_input_handler*/ ctx[10]),
				listen_dev(input1, "input", /*input1_input_handler*/ ctx[11]),
				listen_dev(input2, "input", /*input2_input_handler*/ ctx[13]),
				listen_dev(form, "submit", prevent_default(/*regPage*/ ctx[6]), false, true, false),
				listen_dev(input3, "change", /*input3_change_handler*/ ctx[14]),
				listen_dev(input4, "change", /*input4_change_handler*/ ctx[15]),
				listen_dev(button1, "click", /*regGame*/ ctx[7], false, false, false)
			];
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*name*/ 1 && input0.value !== /*name*/ ctx[0]) {
				set_input_value(input0, /*name*/ ctx[0]);
			}

			if (dirty & /*description*/ 2 && input1.value !== /*description*/ ctx[1]) {
				set_input_value(input1, /*description*/ ctx[1]);
			}

			if (dirty & /*regelArray*/ 8) {
				each_value = /*regelArray*/ ctx[3];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div1, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (dirty & /*regel*/ 4 && input2.value !== /*regel*/ ctx[2]) {
				set_input_value(input2, /*regel*/ ctx[2]);
			}

			if (dirty & /*random*/ 16) {
				input3.checked = /*random*/ ctx[4];
			}

			if (dirty & /*useName*/ 32) {
				input4.checked = /*useName*/ ctx[5];
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(div5);
			destroy_each(each_blocks, detaching);
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let db;
	let games;
	let name = "";
	let description = "";
	let regel = "";
	let regelArray = [];
	let random = false;
	let useName = false;

	onMount(() => {
		db = firebase.firestore();
		games = db.collection("games");
	});

	const regPage = () => {
		$$invalidate(3, regelArray = [...regelArray, regel]);
		$$invalidate(2, regel = "");
	};

	const regGame = () => {
		games.doc().set({
			name,
			description,
			rules: regelArray,
			random,
			useName
		});

		$$invalidate(0, name = "");
		$$invalidate(1, description = "");
		$$invalidate(3, regelArray = []);
		$$invalidate(4, random = false);
		$$invalidate(5, useName = false);
		alert("Game has been added to the database");
	};

	function input0_input_handler() {
		name = this.value;
		$$invalidate(0, name);
	}

	function input1_input_handler() {
		description = this.value;
		$$invalidate(1, description);
	}

	const click_handler = index => {
		regelArray.splice(index, 1);
		$$invalidate(3, regelArray);
	};

	function input2_input_handler() {
		regel = this.value;
		$$invalidate(2, regel);
	}

	function input3_change_handler() {
		random = this.checked;
		$$invalidate(4, random);
	}

	function input4_change_handler() {
		useName = this.checked;
		$$invalidate(5, useName);
	}

	$$self.$capture_state = () => ({
		onMount,
		db,
		games,
		name,
		description,
		regel,
		regelArray,
		random,
		useName,
		regPage,
		regGame,
		firebase,
		alert
	});

	$$self.$inject_state = $$props => {
		if ("db" in $$props) db = $$props.db;
		if ("games" in $$props) games = $$props.games;
		if ("name" in $$props) $$invalidate(0, name = $$props.name);
		if ("description" in $$props) $$invalidate(1, description = $$props.description);
		if ("regel" in $$props) $$invalidate(2, regel = $$props.regel);
		if ("regelArray" in $$props) $$invalidate(3, regelArray = $$props.regelArray);
		if ("random" in $$props) $$invalidate(4, random = $$props.random);
		if ("useName" in $$props) $$invalidate(5, useName = $$props.useName);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		name,
		description,
		regel,
		regelArray,
		random,
		useName,
		regPage,
		regGame,
		db,
		games,
		input0_input_handler,
		input1_input_handler,
		click_handler,
		input2_input_handler,
		input3_change_handler,
		input4_change_handler
	];
}

class Games extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Games",
			options,
			id: create_fragment.name
		});
	}
}

/* src/routes/create.svelte generated by Svelte v3.19.1 */
const file$1 = "src/routes/create.svelte";

function create_fragment$1(ctx) {
	let t;
	let div;
	let current;
	const games = new Games({ $$inline: true });

	const block = {
		c: function create() {
			t = space();
			div = element("div");
			create_component(games.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-1ine71f\"]", document.head);
			head_nodes.forEach(detach_dev);
			t = claim_space(nodes);
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			claim_component(games.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "About";
			attr_dev(div, "class", "svelte-10iyafv");
			add_location(div, file$1, 8, 0, 120);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
			insert_dev(target, div, anchor);
			mount_component(games, div, null);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(games.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(games.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
			if (detaching) detach_dev(div);
			destroy_component(games);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	$$self.$capture_state = () => ({ Games });
	return [];
}

class Create extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Create",
			options,
			id: create_fragment$1.name
		});
	}
}

export default Create;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
