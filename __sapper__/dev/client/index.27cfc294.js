import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, o as onMount, e as element, c as claim_element, a as children, b as detach_dev, f as attr_dev, g as add_location, h as insert_dev, n as noop, v as validate_each_argument, j as space, t as text, k as claim_space, l as claim_text, m as append_dev, p as set_input_value, q as listen_dev, r as run_all, u as set_data_dev, w as prevent_default, x as destroy_each, y as create_component, z as claim_component, A as mount_component, B as transition_in, C as transition_out, D as destroy_component, E as query_selector_all, F as check_outros, G as group_outros } from './client.0dea0b41.js';

/* src/components/GameBoxes.svelte generated by Svelte v3.19.1 */
const file = "src/components/GameBoxes.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[18] = list[i];
	child_ctx[19] = list;
	child_ctx[20] = i;
	return child_ctx;
}

// (90:4) {:else}
function create_else_block(ctx) {
	let div0;
	let h20;
	let t0_value = /*GameData*/ ctx[0].name + "";
	let t0;
	let t1;
	let p;
	let t2_value = /*GameData*/ ctx[0].description + "";
	let t2;
	let t3;
	let div1;
	let h21;
	let t4_value = /*GameData*/ ctx[0].rules.length + "";
	let t4;
	let t5;
	let h3;
	let t6;
	let t7;
	let div4;
	let div2;
	let button0;
	let t8;
	let t9;
	let div3;
	let button1;
	let t10;
	let dispose;

	const block = {
		c: function create() {
			div0 = element("div");
			h20 = element("h2");
			t0 = text(t0_value);
			t1 = space();
			p = element("p");
			t2 = text(t2_value);
			t3 = space();
			div1 = element("div");
			h21 = element("h2");
			t4 = text(t4_value);
			t5 = space();
			h3 = element("h3");
			t6 = text("RULES");
			t7 = space();
			div4 = element("div");
			div2 = element("div");
			button0 = element("button");
			t8 = text("Edit");
			t9 = space();
			div3 = element("div");
			button1 = element("button");
			t10 = text("Delete");
			this.h();
		},
		l: function claim(nodes) {
			div0 = claim_element(nodes, "DIV", { id: true });
			var div0_nodes = children(div0);
			h20 = claim_element(div0_nodes, "H2", { class: true });
			var h20_nodes = children(h20);
			t0 = claim_text(h20_nodes, t0_value);
			h20_nodes.forEach(detach_dev);
			t1 = claim_space(div0_nodes);
			p = claim_element(div0_nodes, "P", { class: true });
			var p_nodes = children(p);
			t2 = claim_text(p_nodes, t2_value);
			p_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t3 = claim_space(nodes);
			div1 = claim_element(nodes, "DIV", { id: true });
			var div1_nodes = children(div1);
			h21 = claim_element(div1_nodes, "H2", { class: true });
			var h21_nodes = children(h21);
			t4 = claim_text(h21_nodes, t4_value);
			h21_nodes.forEach(detach_dev);
			t5 = claim_space(div1_nodes);
			h3 = claim_element(div1_nodes, "H3", { class: true });
			var h3_nodes = children(h3);
			t6 = claim_text(h3_nodes, "RULES");
			h3_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			t7 = claim_space(nodes);
			div4 = claim_element(nodes, "DIV", {});
			var div4_nodes = children(div4);
			div2 = claim_element(div4_nodes, "DIV", { id: true, class: true });
			var div2_nodes = children(div2);
			button0 = claim_element(div2_nodes, "BUTTON", { class: true });
			var button0_nodes = children(button0);
			t8 = claim_text(button0_nodes, "Edit");
			button0_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			t9 = claim_space(div4_nodes);
			div3 = claim_element(div4_nodes, "DIV", { id: true });
			var div3_nodes = children(div3);
			button1 = claim_element(div3_nodes, "BUTTON", { class: true });
			var button1_nodes = children(button1);
			t10 = claim_text(button1_nodes, "Delete");
			button1_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			div4_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h20, "class", "svelte-1thibiv");
			add_location(h20, file, 91, 12, 2179);
			attr_dev(p, "class", "svelte-1thibiv");
			add_location(p, file, 92, 12, 2216);
			attr_dev(div0, "id", "top");
			add_location(div0, file, 90, 8, 2152);
			attr_dev(h21, "class", "svelte-1thibiv");
			add_location(h21, file, 95, 12, 2299);
			attr_dev(h3, "class", "svelte-1thibiv");
			add_location(h3, file, 96, 12, 2344);
			attr_dev(div1, "id", "center");
			add_location(div1, file, 94, 8, 2269);
			attr_dev(button0, "class", "svelte-1thibiv");
			add_location(button0, file, 100, 16, 2434);
			attr_dev(div2, "id", "cenEnd");
			attr_dev(div2, "class", "svelte-1thibiv");
			add_location(div2, file, 99, 12, 2400);
			attr_dev(button1, "class", "delete svelte-1thibiv");
			add_location(button1, file, 103, 16, 2540);
			attr_dev(div3, "id", "end");
			add_location(div3, file, 102, 12, 2509);
			add_location(div4, file, 98, 8, 2382);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div0, anchor);
			append_dev(div0, h20);
			append_dev(h20, t0);
			append_dev(div0, t1);
			append_dev(div0, p);
			append_dev(p, t2);
			insert_dev(target, t3, anchor);
			insert_dev(target, div1, anchor);
			append_dev(div1, h21);
			append_dev(h21, t4);
			append_dev(div1, t5);
			append_dev(div1, h3);
			append_dev(h3, t6);
			insert_dev(target, t7, anchor);
			insert_dev(target, div4, anchor);
			append_dev(div4, div2);
			append_dev(div2, button0);
			append_dev(button0, t8);
			append_dev(div4, t9);
			append_dev(div4, div3);
			append_dev(div3, button1);
			append_dev(button1, t10);

			dispose = [
				listen_dev(button0, "click", /*editGame*/ ctx[6], false, false, false),
				listen_dev(button1, "click", /*deleteGame*/ ctx[4], false, false, false)
			];
		},
		p: function update(ctx, dirty) {
			if (dirty & /*GameData*/ 1 && t0_value !== (t0_value = /*GameData*/ ctx[0].name + "")) set_data_dev(t0, t0_value);
			if (dirty & /*GameData*/ 1 && t2_value !== (t2_value = /*GameData*/ ctx[0].description + "")) set_data_dev(t2, t2_value);
			if (dirty & /*GameData*/ 1 && t4_value !== (t4_value = /*GameData*/ ctx[0].rules.length + "")) set_data_dev(t4, t4_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div0);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(div1);
			if (detaching) detach_dev(t7);
			if (detaching) detach_dev(div4);
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(90:4) {:else}",
		ctx
	});

	return block;
}

// (50:4) {#if edit}
function create_if_block(ctx) {
	let div0;
	let input0;
	let t0;
	let input1;
	let t1;
	let p;
	let t2;
	let t3;
	let div1;
	let t4;
	let div3;
	let div2;
	let form;
	let input2;
	let t5;
	let button0;
	let t6;
	let t7;
	let label0;
	let input3;
	let t8;
	let t9;
	let label1;
	let input4;
	let t10;
	let t11;
	let div6;
	let div4;
	let button1;
	let t12;
	let t13;
	let div5;
	let button2;
	let t14;
	let dispose;
	let each_value = /*GameData*/ ctx[0].rules;
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			div0 = element("div");
			input0 = element("input");
			t0 = space();
			input1 = element("input");
			t1 = space();
			p = element("p");
			t2 = text("Rules:");
			t3 = space();
			div1 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t4 = space();
			div3 = element("div");
			div2 = element("div");
			form = element("form");
			input2 = element("input");
			t5 = space();
			button0 = element("button");
			t6 = text("ADD");
			t7 = space();
			label0 = element("label");
			input3 = element("input");
			t8 = text("\n\t\t\t\t\t\tRandom order");
			t9 = space();
			label1 = element("label");
			input4 = element("input");
			t10 = text("\n\t\t\t\t\t\tUse names");
			t11 = space();
			div6 = element("div");
			div4 = element("div");
			button1 = element("button");
			t12 = text("SAVE");
			t13 = space();
			div5 = element("div");
			button2 = element("button");
			t14 = text("cancel");
			this.h();
		},
		l: function claim(nodes) {
			div0 = claim_element(nodes, "DIV", { id: true, class: true });
			var div0_nodes = children(div0);
			input0 = claim_element(div0_nodes, "INPUT", { type: true, class: true });
			t0 = claim_space(div0_nodes);
			input1 = claim_element(div0_nodes, "INPUT", { type: true, class: true });
			div0_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			p = claim_element(nodes, "P", { class: true });
			var p_nodes = children(p);
			t2 = claim_text(p_nodes, "Rules:");
			p_nodes.forEach(detach_dev);
			t3 = claim_space(nodes);
			div1 = claim_element(nodes, "DIV", { id: true, class: true });
			var div1_nodes = children(div1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div1_nodes);
			}

			div1_nodes.forEach(detach_dev);
			t4 = claim_space(nodes);
			div3 = claim_element(nodes, "DIV", { id: true });
			var div3_nodes = children(div3);
			div2 = claim_element(div3_nodes, "DIV", { id: true });
			var div2_nodes = children(div2);
			form = claim_element(div2_nodes, "FORM", {});
			var form_nodes = children(form);
			input2 = claim_element(form_nodes, "INPUT", { placeholder: true });
			t5 = claim_space(form_nodes);
			button0 = claim_element(form_nodes, "BUTTON", { class: true });
			var button0_nodes = children(button0);
			t6 = claim_text(button0_nodes, "ADD");
			button0_nodes.forEach(detach_dev);
			form_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			t7 = claim_space(div3_nodes);
			label0 = claim_element(div3_nodes, "LABEL", { class: true });
			var label0_nodes = children(label0);
			input3 = claim_element(label0_nodes, "INPUT", { type: true });
			t8 = claim_text(label0_nodes, "\n\t\t\t\t\t\tRandom order");
			label0_nodes.forEach(detach_dev);
			t9 = claim_space(div3_nodes);
			label1 = claim_element(div3_nodes, "LABEL", { class: true });
			var label1_nodes = children(label1);
			input4 = claim_element(label1_nodes, "INPUT", { type: true });
			t10 = claim_text(label1_nodes, "\n\t\t\t\t\t\tUse names");
			label1_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			t11 = claim_space(nodes);
			div6 = claim_element(nodes, "DIV", {});
			var div6_nodes = children(div6);
			div4 = claim_element(div6_nodes, "DIV", { id: true, class: true });
			var div4_nodes = children(div4);
			button1 = claim_element(div4_nodes, "BUTTON", { class: true });
			var button1_nodes = children(button1);
			t12 = claim_text(button1_nodes, "SAVE");
			button1_nodes.forEach(detach_dev);
			div4_nodes.forEach(detach_dev);
			t13 = claim_space(div6_nodes);
			div5 = claim_element(div6_nodes, "DIV", { id: true });
			var div5_nodes = children(div5);
			button2 = claim_element(div5_nodes, "BUTTON", { class: true });
			var button2_nodes = children(button2);
			t14 = claim_text(button2_nodes, "cancel");
			button2_nodes.forEach(detach_dev);
			div5_nodes.forEach(detach_dev);
			div6_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(input0, "type", "text");
			attr_dev(input0, "class", "svelte-1thibiv");
			add_location(input0, file, 51, 4, 896);
			attr_dev(input1, "type", "text");
			attr_dev(input1, "class", "svelte-1thibiv");
			add_location(input1, file, 52, 4, 947);
			attr_dev(div0, "id", "top");
			attr_dev(div0, "class", "svelte-1thibiv");
			add_location(div0, file, 50, 8, 877);
			attr_dev(p, "class", "svelte-1thibiv");
			add_location(p, file, 54, 12, 1023);
			attr_dev(div1, "id", "print");
			attr_dev(div1, "class", "svelte-1thibiv");
			add_location(div1, file, 55, 4, 1041);
			attr_dev(input2, "placeholder", "Add rule");
			add_location(input2, file, 68, 7, 1497);
			attr_dev(button0, "class", "svelte-1thibiv");
			add_location(button0, file, 69, 7, 1554);
			add_location(form, file, 67, 6, 1448);
			attr_dev(div2, "id", "add");
			add_location(div2, file, 66, 5, 1427);
			attr_dev(input3, "type", "checkbox");
			add_location(input3, file, 73, 6, 1620);
			attr_dev(label0, "class", "svelte-1thibiv");
			add_location(label0, file, 72, 5, 1606);
			attr_dev(input4, "type", "checkbox");
			add_location(input4, file, 77, 6, 1727);
			attr_dev(label1, "class", "svelte-1thibiv");
			add_location(label1, file, 76, 5, 1713);
			attr_dev(div3, "id", "bottom");
			add_location(div3, file, 65, 4, 1404);
			attr_dev(button1, "class", "svelte-1thibiv");
			add_location(button1, file, 83, 20, 1896);
			attr_dev(div4, "id", "cenEnd");
			attr_dev(div4, "class", "svelte-1thibiv");
			add_location(div4, file, 82, 16, 1858);
			attr_dev(button2, "class", "delete svelte-1thibiv");
			add_location(button2, file, 86, 20, 2031);
			attr_dev(div5, "id", "end");
			add_location(div5, file, 85, 16, 1996);
			add_location(div6, file, 81, 12, 1836);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div0, anchor);
			append_dev(div0, input0);
			set_input_value(input0, /*GameData*/ ctx[0].name);
			append_dev(div0, t0);
			append_dev(div0, input1);
			set_input_value(input1, /*GameData*/ ctx[0].description);
			insert_dev(target, t1, anchor);
			insert_dev(target, p, anchor);
			append_dev(p, t2);
			insert_dev(target, t3, anchor);
			insert_dev(target, div1, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div1, null);
			}

			insert_dev(target, t4, anchor);
			insert_dev(target, div3, anchor);
			append_dev(div3, div2);
			append_dev(div2, form);
			append_dev(form, input2);
			set_input_value(input2, /*regel*/ ctx[2]);
			append_dev(form, t5);
			append_dev(form, button0);
			append_dev(button0, t6);
			append_dev(div3, t7);
			append_dev(div3, label0);
			append_dev(label0, input3);
			input3.checked = /*GameData*/ ctx[0].random;
			append_dev(label0, t8);
			append_dev(div3, t9);
			append_dev(div3, label1);
			append_dev(label1, input4);
			input4.checked = /*GameData*/ ctx[0].useName;
			append_dev(label1, t10);
			insert_dev(target, t11, anchor);
			insert_dev(target, div6, anchor);
			append_dev(div6, div4);
			append_dev(div4, button1);
			append_dev(button1, t12);
			append_dev(div6, t13);
			append_dev(div6, div5);
			append_dev(div5, button2);
			append_dev(button2, t14);

			dispose = [
				listen_dev(input0, "input", /*input0_input_handler*/ ctx[10]),
				listen_dev(input1, "input", /*input1_input_handler*/ ctx[11]),
				listen_dev(input2, "input", /*input2_input_handler*/ ctx[14]),
				listen_dev(form, "submit", prevent_default(/*regPage*/ ctx[5]), false, true, false),
				listen_dev(input3, "change", /*input3_change_handler*/ ctx[15]),
				listen_dev(input4, "change", /*input4_change_handler*/ ctx[16]),
				listen_dev(button1, "click", /*click_handler_1*/ ctx[17], false, false, false),
				listen_dev(button2, "click", /*editGame*/ ctx[6], false, false, false)
			];
		},
		p: function update(ctx, dirty) {
			if (dirty & /*GameData*/ 1 && input0.value !== /*GameData*/ ctx[0].name) {
				set_input_value(input0, /*GameData*/ ctx[0].name);
			}

			if (dirty & /*GameData*/ 1 && input1.value !== /*GameData*/ ctx[0].description) {
				set_input_value(input1, /*GameData*/ ctx[0].description);
			}

			if (dirty & /*GameData*/ 1) {
				each_value = /*GameData*/ ctx[0].rules;
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div1, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (dirty & /*regel*/ 4 && input2.value !== /*regel*/ ctx[2]) {
				set_input_value(input2, /*regel*/ ctx[2]);
			}

			if (dirty & /*GameData*/ 1) {
				input3.checked = /*GameData*/ ctx[0].random;
			}

			if (dirty & /*GameData*/ 1) {
				input4.checked = /*GameData*/ ctx[0].useName;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div0);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(p);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(div1);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(t4);
			if (detaching) detach_dev(div3);
			if (detaching) detach_dev(t11);
			if (detaching) detach_dev(div6);
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(50:4) {#if edit}",
		ctx
	});

	return block;
}

// (58:5) {#each GameData.rules as regarr, index}
function create_each_block(ctx) {
	let div;
	let input;
	let input_placeholder_value;
	let t0;
	let button;
	let t1;
	let t2;
	let dispose;

	function input_input_handler() {
		/*input_input_handler*/ ctx[12].call(input, /*regarr*/ ctx[18], /*each_value*/ ctx[19], /*index*/ ctx[20]);
	}

	function click_handler(...args) {
		return /*click_handler*/ ctx[13](/*index*/ ctx[20], ...args);
	}

	const block = {
		c: function create() {
			div = element("div");
			input = element("input");
			t0 = space();
			button = element("button");
			t1 = text("X");
			t2 = space();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			input = claim_element(div_nodes, "INPUT", { class: true, placeholder: true });
			t0 = claim_space(div_nodes);
			button = claim_element(div_nodes, "BUTTON", { class: true });
			var button_nodes = children(button);
			t1 = claim_text(button_nodes, "X");
			button_nodes.forEach(detach_dev);
			t2 = claim_space(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(input, "class", "long svelte-1thibiv");
			attr_dev(input, "placeholder", input_placeholder_value = /*regarr*/ ctx[18]);
			add_location(input, file, 59, 7, 1169);
			attr_dev(button, "class", "svelte-1thibiv");
			add_location(button, file, 60, 7, 1238);
			attr_dev(div, "class", "regler svelte-1thibiv");
			add_location(div, file, 58, 6, 1141);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, input);
			set_input_value(input, /*regarr*/ ctx[18]);
			append_dev(div, t0);
			append_dev(div, button);
			append_dev(button, t1);
			append_dev(div, t2);

			dispose = [
				listen_dev(input, "input", input_input_handler),
				listen_dev(button, "click", click_handler, false, false, false)
			];
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*GameData*/ 1 && input_placeholder_value !== (input_placeholder_value = /*regarr*/ ctx[18])) {
				attr_dev(input, "placeholder", input_placeholder_value);
			}

			if (dirty & /*GameData*/ 1 && input.value !== /*regarr*/ ctx[18]) {
				set_input_value(input, /*regarr*/ ctx[18]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(58:5) {#each GameData.rules as regarr, index}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let section;

	function select_block_type(ctx, dirty) {
		if (/*edit*/ ctx[3]) return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			section = element("section");
			if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			if_block.l(section_nodes);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(section, "class", "svelte-1thibiv");
			add_location(section, file, 48, 0, 844);
		},
		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			if_block.m(section, null);
		},
		p: function update(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(section, null);
				}
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
			if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let games;
	let db;
	let update;
	let regel = "";

	onMount(() => {
		db = firebase.firestore();
		games = db.collection("games");

		$$invalidate(1, update = () => {
			const game = games.doc(id);

			game.update({
				name: GameData.name,
				description: GameData.description,
				rules: GameData.rules,
				random: GameData.random,
				useName: GameData.useName
			});
		});
	});

	let { GameData = {} } = $$props;
	let { id = "" } = $$props;

	const deleteGame = () => {
		const game = games.doc(id);
		game.delete();
	};

	let edit = false;

	const regPage = () => {
		$$invalidate(0, GameData.rules = [...GameData.rules, regel], GameData);
		$$invalidate(2, regel = "");
	};

	const editGame = () => {
		$$invalidate(3, edit = !edit);
	};

	const writable_props = ["GameData", "id"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<GameBoxes> was created with unknown prop '${key}'`);
	});

	function input0_input_handler() {
		GameData.name = this.value;
		$$invalidate(0, GameData);
	}

	function input1_input_handler() {
		GameData.description = this.value;
		$$invalidate(0, GameData);
	}

	function input_input_handler(regarr, each_value, index) {
		each_value[index] = this.value;
		$$invalidate(0, GameData);
	}

	const click_handler = index => {
		GameData.rules.splice(index, 1);
		$$invalidate(0, GameData);
	};

	function input2_input_handler() {
		regel = this.value;
		$$invalidate(2, regel);
	}

	function input3_change_handler() {
		GameData.random = this.checked;
		$$invalidate(0, GameData);
	}

	function input4_change_handler() {
		GameData.useName = this.checked;
		$$invalidate(0, GameData);
	}

	const click_handler_1 = () => {
		$$invalidate(3, edit = !edit);
	};

	$$self.$set = $$props => {
		if ("GameData" in $$props) $$invalidate(0, GameData = $$props.GameData);
		if ("id" in $$props) $$invalidate(7, id = $$props.id);
	};

	$$self.$capture_state = () => ({
		onMount,
		games,
		db,
		update,
		regel,
		GameData,
		id,
		deleteGame,
		edit,
		regPage,
		editGame,
		firebase
	});

	$$self.$inject_state = $$props => {
		if ("games" in $$props) games = $$props.games;
		if ("db" in $$props) db = $$props.db;
		if ("update" in $$props) $$invalidate(1, update = $$props.update);
		if ("regel" in $$props) $$invalidate(2, regel = $$props.regel);
		if ("GameData" in $$props) $$invalidate(0, GameData = $$props.GameData);
		if ("id" in $$props) $$invalidate(7, id = $$props.id);
		if ("edit" in $$props) $$invalidate(3, edit = $$props.edit);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		GameData,
		update,
		regel,
		edit,
		deleteGame,
		regPage,
		editGame,
		id,
		games,
		db,
		input0_input_handler,
		input1_input_handler,
		input_input_handler,
		click_handler,
		input2_input_handler,
		input3_change_handler,
		input4_change_handler,
		click_handler_1
	];
}

class GameBoxes extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { GameData: 0, id: 7 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "GameBoxes",
			options,
			id: create_fragment.name
		});
	}

	get GameData() {
		throw new Error("<GameBoxes>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set GameData(value) {
		throw new Error("<GameBoxes>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<GameBoxes>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<GameBoxes>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/routes/index.svelte generated by Svelte v3.19.1 */
const file$1 = "src/routes/index.svelte";

function get_each_context$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[4] = list[i];
	return child_ctx;
}

// (42:2) {:else}
function create_else_block$1(ctx) {
	let h2;
	let t;

	const block = {
		c: function create() {
			h2 = element("h2");
			t = text("Loading games...");
			this.h();
		},
		l: function claim(nodes) {
			h2 = claim_element(nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t = claim_text(h2_nodes, "Loading games...");
			h2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h2, "class", "svelte-1w7sarh");
			add_location(h2, file$1, 42, 3, 706);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h2, anchor);
			append_dev(h2, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$1.name,
		type: "else",
		source: "(42:2) {:else}",
		ctx
	});

	return block;
}

// (40:2) {#each GameBoxes as GameBox }
function create_each_block$1(ctx) {
	let current;

	const gamebx = new GameBoxes({
			props: {
				id: /*GameBox*/ ctx[4].id,
				GameData: /*GameBox*/ ctx[4].data()
			},
			$$inline: true
		});

	gamebx.$on("toggle", /*editGame*/ ctx[1]);
	gamebx.$on("id", /*editGame*/ ctx[1]);

	const block = {
		c: function create() {
			create_component(gamebx.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(gamebx.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(gamebx, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const gamebx_changes = {};
			if (dirty & /*GameBoxes*/ 1) gamebx_changes.id = /*GameBox*/ ctx[4].id;
			if (dirty & /*GameBoxes*/ 1) gamebx_changes.GameData = /*GameBox*/ ctx[4].data();
			gamebx.$set(gamebx_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(gamebx.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(gamebx.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(gamebx, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$1.name,
		type: "each",
		source: "(40:2) {#each GameBoxes as GameBox }",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let t;
	let main;
	let section;
	let current;
	let each_value = /*GameBoxes*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	let each_1_else = null;

	if (!each_value.length) {
		each_1_else = create_else_block$1(ctx);
	}

	const block = {
		c: function create() {
			t = space();
			main = element("main");
			section = element("section");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			if (each_1_else) {
				each_1_else.c();
			}

			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-oh6yg0\"]", document.head);
			head_nodes.forEach(detach_dev);
			t = claim_space(nodes);
			main = claim_element(nodes, "MAIN", { class: true });
			var main_nodes = children(main);
			section = claim_element(main_nodes, "SECTION", { class: true });
			var section_nodes = children(section);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(section_nodes);
			}

			if (each_1_else) {
				each_1_else.l(section_nodes);
			}

			section_nodes.forEach(detach_dev);
			main_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Sapper project template";
			attr_dev(section, "class", "svelte-1w7sarh");
			add_location(section, file$1, 38, 1, 557);
			attr_dev(main, "class", "svelte-1w7sarh");
			add_location(main, file$1, 37, 0, 549);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
			insert_dev(target, main, anchor);
			append_dev(main, section);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(section, null);
			}

			if (each_1_else) {
				each_1_else.m(section, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*GameBoxes, editGame*/ 3) {
				each_value = /*GameBoxes*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$1(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$1(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(section, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			if (each_value.length) {
				if (each_1_else) {
					each_1_else.d(1);
					each_1_else = null;
				}
			} else if (!each_1_else) {
				each_1_else = create_else_block$1(ctx);
				each_1_else.c();
				each_1_else.m(section, null);
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
			if (detaching) detach_dev(main);
			destroy_each(each_blocks, detaching);
			if (each_1_else) each_1_else.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let games;
	let db;
	let GameBoxes$1 = [];

	onMount(() => {
		db = firebase.firestore();
		games = db.collection("games");

		games.onSnapshot(snap => {
			$$invalidate(0, GameBoxes$1 = snap.docs);
		});
	});

	const editGame = evt => {
		edit = !edit;
		name = evt.name;
		description = evt.description;

		//regelArray = evt.regelArray
		random = evt.random;

		useName = evt.useName;
	};

	$$self.$capture_state = () => ({
		Gamebx: GameBoxes,
		onMount,
		games,
		db,
		GameBoxes: GameBoxes$1,
		editGame,
		firebase,
		edit,
		name,
		description,
		random,
		useName
	});

	$$self.$inject_state = $$props => {
		if ("games" in $$props) games = $$props.games;
		if ("db" in $$props) db = $$props.db;
		if ("GameBoxes" in $$props) $$invalidate(0, GameBoxes$1 = $$props.GameBoxes);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [GameBoxes$1, editGame];
}

class Routes extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Routes",
			options,
			id: create_fragment$1.name
		});
	}
}

export default Routes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
